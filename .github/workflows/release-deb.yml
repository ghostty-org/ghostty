on:
    workflow_dispatch:
        inputs:
            version:
                description: 'Version to deploy (format: vX.Y.Z)'
                required: true
            upload:
                description: 'Upload final artifacts to R2'
                default: false
    push:
        tags:
            - 'v[0-9]+.[0-9]+.[0-9]+'

name: Release Tag

jobs:
    setup:
        runs-on: ubuntu-latest
        outputs:
            version: ${{ steps.extract_version.outputs.version }}
            build: ${{ steps.extract_build_info.outputs.build }}
            commit: ${{ steps.extract_build_info.outputs.commit }}
            commit_long: ${{ steps.extract_build_info.outputs.commit_long }}
        steps:
            - name: Validate Version Input
              if: github.event_name == 'workflow_dispatch'
              run: |
                  if [[ ! "${{ github.event.inputs.version }}" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                    echo "Error: Version must follow the format vX.Y.Z (e.g., v1.0.0)."
                    exit 1
                  fi

                  echo "Version is valid: ${{ github.event.inputs.version }}"

            - name: Exract the Version
              id: extract_version
              run: |
                  if [[ "${{ github.event_name }}" == "push" ]]; then
                    # Remove the leading 'v' from the tag
                    VERSION=${GITHUB_REF#refs/tags/v}
                    echo "version=$VERSION" >> $GITHUB_OUTPUT
                  elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
                    VERSION=${{ github.event.inputs.version }}
                    VERSION=${VERSION#v}
                    echo "version=$VERSION" >> $GITHUB_OUTPUT
                  else
                    echo "Error: Unsupported event type."
                    exit 1
                  fi

            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  # Important so that build number generation works
                  fetch-depth: 0
            - name: Install Dependencies
              run: |
                  sudo apt update
                  sudo apt install -y build-essential libbz2-dev libfreetype6-dev zlib1g-dev libpng-dev libgtk-4-dev libadwaita-1-dev git libglib2.0-dev pkg-config
                  sudo snap install --beta zig --classic

            - name: Fetch Zig Dependencies
              run: |
                  echo "Setting up Zig cache directory..."
                  CACHE_DIR="/tmp/offline-cache"
                  mkdir -p "$CACHE_DIR"

                  echo "Fetching Zig dependencies..."
                  export ZIG_GLOBAL_CACHE_DIR="$CACHE_DIR"
                  ./nix/build-support/fetch-zig-cache.sh

            - name: Build Application
              run: |
                  echo "Building..."
                  CACHE_DIR="/tmp/offline-cache"
                  zig build --prefix /usr --system "$CACHE_DIR/p" -Doptimize=ReleaseFast -Dcpu=baseline -Dversion-string=${VERSION}
                  if [ $? -ne 0 ]; then
                      echo "Build failed!"
                      exit 1
                  fi

            - name: Build DEB Package
              run: |
                  BUILD_DIR="$(pwd)/build"
                  DEB_DIR="$BUILD_DIR/${APP_NAME}_${VERSION}_${ARCH}"
                  DESTDIR="$DEB_DIR/usr"
                  BIN_DIR="$DESTDIR/bin"
                  DESKTOP_DIR="$DEB_DIR/usr/share/applications"

                  # Clean up old build directories
                  rm -rf "$BUILD_DIR"

                  # Step 1: Create directory structure
                  mkdir -p "$DEB_DIR"
                  mkdir -p "$BIN_DIR"
                  mkdir -p "$DESKTOP_DIR"

                  # Step 2: Add application binaries
                  cp /usr/bin/${APP_NAME} "$BIN_DIR/${APP_NAME}"

                  # Step 3: Add and rename desktop file
                  cp ./dist/linux/app.desktop "$DESKTOP_DIR/ghostty.desktop"

                  # Step 4: Create DEBIAN control file
                  mkdir -p "$DEB_DIR/DEBIAN"
                  cat <<EOF > "$DEB_DIR/DEBIAN/control"
                  Package: $APP_NAME
                  Version: $VERSION
                  Architecture: $ARCH
                  Maintainer: Ronit Gandhi <ronitgandhi96@gmail.com>
                  Description: A fast, feature-rich, and cross-platform terminal emulator that uses platform-native UI and GPU acceleration.
                  EOF

                  # Step 5: Build .deb package
                  dpkg-deb --build "$DEB_DIR"

            - name: Upload DEB Artifact
              uses: actions/upload-artifact@v4
              with:
                  name: deb-package
                  path: |
                      $BUILD_DIR/${APP_NAME}_${VERSION}_${ARCH}.deb

    create-release:
        needs: setup
        runs-on: ubuntu-latest
        steps:
            - name: Download DEB Artifact
              uses: actions/download-artifact@v4
              with:
                  name: deb-package
                  path: ./artifacts

            - name: Create GitHub Release
              uses: actions/create-release@v3
              with:
                  tag_name: ${{ github.ref_name }}
                  release_name: Release ${{ github.ref_name }}
                  body: |
                      Automated release of ${{ github.ref_name }}.
                  draft: false
                  prerelease: false
                  generate_release_notes: true
                  assets: ./artifacts/*.deb
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
